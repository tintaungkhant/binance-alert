{
  "version": 3,
  "sources": ["../src/scraper.ts"],
  "sourcesContent": ["import { Page, Browser as PuppeteerBrowser } from \"puppeteer\"\nimport * as dotenv from \"dotenv\";\nimport axios from \"axios\";\nimport fs from \"fs\";\nimport { getCache, setCache } from \"./helpers\";\ndotenv.config();\nexport default class Scraper {\n    page!: Page\n    constructor(private browser: PuppeteerBrowser) {\n\n    }\n\n    async start() {\n        try {\n            this.page = await this.browser.newPage();\n\n            await this.page.setViewport({ width: 600, height: 600 })\n\n            await this.page.goto(\"https://p2p.binance.com/trade/all-payments/USDT?fiat=AED\");\n\n            console.log(\"Page loaded\");\n\n            // await this.storeSiteSettings();\n\n            // return;\n\n            await this.setUpSiteSettings();\n\n            console.log(\"Selecting currency\");\n\n            await this.delay(1);\n\n            let currency_input_xp = this.xpath('//*[@id=\"__APP\"]/div/div[2]/main/div[2]/div[1]/div/div[2]/div[2]/div/div');\n            let currency_input = await this.page.$(currency_input_xp);\n\n            if (!currency_input) {\n                console.log(\"Currency input not found\");\n\n                await this.sendToTelegram(\"Currency input not found\")\n\n                return;\n            }\n\n            console.log(\"Clicking over currency input\");\n\n            await currency_input.click();\n\n            await this.delay(1);\n\n            console.log(\"Searching currency\");\n\n            let currency_search_input_xp = this.xpath('//*[@id=\"__APP\"]/div/div[2]/main/div[2]/div[1]/div/div[2]/div[2]/div/div[2]/div/div/div[1]/div/input');\n\n            let currency_search_input = await this.page.$(currency_search_input_xp);\n\n            if (!currency_search_input) {\n                console.log(\"Currency search input not found\");\n\n                await this.sendToTelegram(\"Currency search input not found\");\n                return;\n            }\n\n            console.log(\"Typing MMK\");\n\n            await currency_search_input.type(\"MMK\", { delay: 200 });\n\n            await this.delay(1);\n\n            console.log(\"Clicking currency button\");\n\n            let currency_xp = this.xpath('//*[@id=\"__APP\"]/div/div[2]/main/div[2]/div[1]/div/div[2]/div[2]/div/div[2]/div/div/div[2]/div/div');\n\n            let currency_button = await this.page.$(currency_xp);\n\n            if (!currency_button) {\n                console.log(\"Currency button not found\");\n\n                await this.sendToTelegram(\"Currency search input not found\");\n                return;\n            }\n\n            await currency_button.click();\n\n            console.log(\"Currency selected\");\n\n            await this.delay(2);\n\n            console.log(\"Selecting first item\");\n\n            let first_item_xp = this.xpath('//*[@id=\"__APP\"]/div/div[2]/main/div[2]/div[3]/div/div[1]/div[1]/div[2]/div[1]/div/div[1]');\n\n            let first_item = await this.page.$(first_item_xp);\n\n            if (!first_item) {\n                console.log(\"First item not found\");\n\n                await this.sendToTelegram(\"Currency search input not found\");\n                return;\n            }\n\n            console.log(\"Selected first item\");\n\n            let price = await this.page.evaluate((el) => el.textContent, first_item);\n\n            if (price) {\n                const regex = /[^0-9]/g;\n                price = price.replace(regex, \"\");\n\n                let buy_price_threshold = process.env.BUY_PRICE_THRESHOLD;\n                buy_price_threshold = buy_price_threshold ? buy_price_threshold : \"0\";\n\n                console.info(\"Price threshold \" + buy_price_threshold);\n                console.info(\"Price: \" + price);\n\n                if (price <= buy_price_threshold) {\n                    await this.sendBuyPriceAlert(buy_price_threshold, price);\n                }\n            }\n\n            await this.page.close();\n\n            await this.browser.disconnect();\n\n            console.log(\"Browser disconnected\")\n        } catch (error) {\n            console.log(error)\n        }\n    }\n\n    xpath(selector: string) {\n        return `::-p-xpath(${selector})`;\n    }\n\n    async delay(seconds: number) {\n        return new Promise((resolve) => {\n            setTimeout(resolve, seconds * 1000);\n        });\n    }\n\n    async sendBuyPriceAlert(buy_price_threshold: string, price: string) {\n        await this.sendToTelegram(`Price is below threshold\\nThreshold: ${buy_price_threshold}\\nPrice: ${price}`);\n    }\n\n    async sendToTelegram(text: string) {\n        let token = process.env.TELEGRAM_BOT_TOKEN;\n\n        let url = `https://api.telegram.org/bot${token}/sendMessage`;\n\n        let group_id = process.env.TELEGRAM_GROUP_ID;\n\n        let params = {\n            chat_id: group_id ? group_id : \"\",\n            text\n        };\n\n        // Convert the params object to a query string\n        const queryString = new URLSearchParams(params).toString();\n\n        // Append the query string to the URL\n        const fetchUrl = `${url}?${queryString}`;\n\n        // Use the Fetch API to make the GET request\n        await fetch(fetchUrl)\n            .then(response => {\n                if (!response.ok) {\n                    throw new Error('Network response was not ok ' + response.statusText);\n                }\n                return response.json();\n            })\n    }\n\n    async storeSiteSettings() {\n        let cookies = await this.page.cookies();\n\n        fs.writeFileSync(\"site-settings/cookies.json\", JSON.stringify(cookies, null, 2));\n\n        let local_storage = await this.page.evaluate(() => {\n            let json = {};\n            for (let i = 0; i < localStorage.length; i++) {\n                let key = localStorage.key(i);\n\n                if (!key) continue;\n\n                json[key] = localStorage.getItem(key);\n            }\n            return json;\n        });\n\n        fs.writeFileSync(\"site-settings/local_storage.json\", JSON.stringify(local_storage, null, 2));\n    }\n\n    async setUpSiteSettings() {\n        let cookies = fs.readFileSync(\"site-settings/cookies.json\", \"utf-8\");\n\n        if (cookies) {\n            await this.page.setCookie(...JSON.parse(cookies));\n        }\n\n        let local_storage = fs.readFileSync(\"site-settings/local_storage.json\", \"utf-8\");\n\n        if (local_storage) {\n            await this.page.evaluate((local_storage) => {\n                for (let key in local_storage) {\n                    localStorage.setItem(key, local_storage[key]);\n                }\n            }, JSON.parse(local_storage));\n        }\n\n        await this.page.reload();\n\n        await this.delay(2);\n    }\n}"],
  "mappings": "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",
  "names": ["dotenv", "fs", "Scraper", "browser", "currency_input_xp", "currency_input", "currency_search_input_xp", "currency_search_input", "currency_xp", "currency_button", "first_item_xp", "first_item", "price", "el", "regex", "buy_price_threshold", "error", "selector", "seconds", "resolve", "text", "url", "group_id", "params", "queryString", "fetchUrl", "response", "cookies", "local_storage", "json", "key"]
}
