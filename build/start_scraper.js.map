{
  "version": 3,
  "sources": ["../src/browser.ts", "../src/helpers.ts", "../src/scraper.ts", "../src/start_scraper.ts"],
  "sourcesContent": ["import puppeteer, { Browser as PuppeteerBrowser } from \"puppeteer\"\nimport { getCache, setCache } from \"./helpers\"\n\nexport default class Browser {\n    browser!: PuppeteerBrowser\n\n    async create() {\n        let max_attempt = 2;\n        let attempts = 0;\n\n        do {\n            try {\n                attempts++;\n\n                let wsEndpoint = await getCache(\"wsEndpoint\");\n\n                if (wsEndpoint) {\n                    this.browser = await puppeteer.connect({\n                        browserWSEndpoint: wsEndpoint\n                    });\n\n                    console.log(\"Browser connected\");\n\n                    return this.browser;\n                }\n\n                if (!wsEndpoint) {\n                    this.browser = await puppeteer.launch({\n                        userDataDir: \"./user_data\",\n                        headless: true\n                    });\n\n                    wsEndpoint = this.browser.wsEndpoint();\n\n                    await setCache(\"wsEndpoint\", wsEndpoint);\n\n                    console.log(\"Browser created\");\n\n                    return this.browser;\n                }\n            } catch (error) {\n                if (attempts === max_attempt) {\n                    console.log(\"Error at starting browser\");\n                } else {\n                    await setCache(\"wsEndpoint\", \"\");\n                }\n            }\n        } while (attempts < max_attempt);\n    }\n}", "import { createClient } from \"redis\";\n\nconst client = createClient();\n\nexport async function setCache(key: string, value: any) {\n    await client.connect();\n\n    await client.set(key, value);\n\n    await client.disconnect();\n}\n\nexport async function getCache(key: string) {\n    await client.connect();\n\n    let value = await client.get(key);\n\n    await client.disconnect();\n\n    return value;\n}", "import { Browser as PuppeteerBrowser } from \"puppeteer\"\nimport * as dotenv from \"dotenv\";\nimport axios from \"axios\";\ndotenv.config();\nexport default class Scraper {\n    constructor(private browser: PuppeteerBrowser) {\n\n    }\n\n    async start() {\n        try {\n            const page = await this.browser.newPage();\n\n            await page.goto(\"https://p2p.binance.com/trade/all-payments/USDT?fiat=AED\");\n\n            console.log(\"Page loaded\");\n\n            console.log(\"Selecting currency\");\n\n            await this.delay(1);\n\n            let currency_input_xp = this.xpath('//*[@id=\"__APP\"]/div/div[2]/main/div[2]/div[1]/div/div[2]/div[1]/div[2]/div/div/div[1]');\n            let currency_input = await page.$(currency_input_xp);\n\n            if (!currency_input) {\n                console.log(\"Currency input not found\");\n                return;\n            }\n\n            console.log(\"Hovering over currency input\");\n\n            await currency_input.hover();\n\n            let currency_xp = this.xpath('//*[@id=\"__APP\"]/div/div[2]/main/div[2]/div[1]/div/div[2]/div[1]/div[2]/div/div/div[2]/div/div/div[2]/div');\n\n            let currency_buttons = Array.from(await page.$$(currency_xp));\n\n            if (!currency_buttons.length) {\n                console.log(\"Currency buttons not found\");\n                return;\n            }\n\n            console.log(\"Clicking currency button\");\n\n            let clicked_currency = false;\n\n            for (let i = 0; i < currency_buttons.length; i++) {\n                let currency_button = await page.evaluate((el) => el.textContent, currency_buttons[i]);\n\n                currency_button = currency_button ? currency_button.trim() : \"\";\n\n                if (currency_button === \"MMK\") {\n                    await currency_buttons[i].click();\n\n                    clicked_currency = true;\n                    break;\n                }\n            }\n\n            if (!clicked_currency) {\n                console.log(\"Currency not found\");\n                return;\n            }\n\n            console.log(\"Currency selected\");\n\n            await this.delay(2);\n\n            console.log(\"Selecting first item\");\n\n            let first_item_xp = this.xpath('//*[@id=\"__APP\"]/div/div[2]/main/div[2]/div[3]/div/div[1]/div[1]/div[2]/div[1]/div/div[1]');\n\n            let first_item = await page.$(first_item_xp);\n\n            if (!first_item) {\n                console.log(\"First item not found\");\n                return;\n            }\n\n            console.log(\"Selected first item\");\n\n            let price = await page.evaluate((el) => el.textContent, first_item);\n\n            if (price) {\n                const regex = /[^0-9]/g;\n                price = price.replace(regex, \"\");\n\n                let buy_price_threshold = process.env.BUY_PRICE_THRESHOLD;\n                buy_price_threshold = buy_price_threshold ? buy_price_threshold : \"0\";\n\n                console.info(\"Price: \" + price);\n\n                if (price <= buy_price_threshold) {\n                    await this.sendToTelegram(price);\n                }\n            }\n\n            await page.close();\n\n            await this.browser.disconnect();\n\n            console.log(\"Browser disconnected\")\n        } catch (error) {\n            console.log(error)\n        }\n    }\n\n    xpath(selector: string) {\n        return `::-p-xpath(${selector})`;\n    }\n\n    async delay(seconds: number) {\n        return new Promise((resolve) => {\n            setTimeout(resolve, seconds * 1000);\n        });\n    }\n\n    async sendToTelegram(price: string) {\n        let token = process.env.TELEGRAM_BOT_TOKEN;\n\n        let url = `https://api.telegram.org/bot${token}/sendMessage`;\n\n        let params = {\n            chat_id: process.env.TELEGRAM_GROUP_ID,\n            text: `Price: ${price}`\n        };\n\n        await axios.get(url, {\n            params\n        });\n    }\n}", "import Browser from \"./browser\";\nimport Scraper from \"./scraper\";\n\nvar locked = false;\n\n(async () => {\n    setInterval(async () => {\n        if (locked) {\n            return;\n        }\n\n        locked = true;\n\n        await run();\n    \n        locked = false;\n    }, 5000);\n})();\n\n\nasync function run() {\n    const browser = await(new Browser).create();\n\n    if (!browser) {\n        console.log(\"Browser not created\");\n        return;\n    }\n\n    const scraper = new Scraper(browser);\n\n    await scraper.start();\n};"],
  "mappings": "AAAA,OAAOA,MAAgD,YCAvD,OAAS,gBAAAC,MAAoB,QAE7B,IAAMC,EAASD,EAAa,EAE5B,eAAsBE,EAASC,EAAaC,EAAY,CACpD,MAAMH,EAAO,QAAQ,EAErB,MAAMA,EAAO,IAAIE,EAAKC,CAAK,EAE3B,MAAMH,EAAO,WAAW,CAC5B,CAEA,eAAsBI,EAASF,EAAa,CACxC,MAAMF,EAAO,QAAQ,EAErB,IAAIG,EAAQ,MAAMH,EAAO,IAAIE,CAAG,EAEhC,aAAMF,EAAO,WAAW,EAEjBG,CACX,CDjBA,IAAqBE,EAArB,KAA6B,CACzB,QAEA,MAAM,QAAS,CACX,IAAIC,EAAc,EACdC,EAAW,EAEf,EACI,IAAI,CACAA,IAEA,IAAIC,EAAa,MAAMC,EAAS,YAAY,EAE5C,GAAID,EACA,YAAK,QAAU,MAAME,EAAU,QAAQ,CACnC,kBAAmBF,CACvB,CAAC,EAED,QAAQ,IAAI,mBAAmB,EAExB,KAAK,QAGhB,GAAI,CAACA,EACD,YAAK,QAAU,MAAME,EAAU,OAAO,CAClC,YAAa,cACb,SAAU,EACd,CAAC,EAEDF,EAAa,KAAK,QAAQ,WAAW,EAErC,MAAMG,EAAS,aAAcH,CAAU,EAEvC,QAAQ,IAAI,iBAAiB,EAEtB,KAAK,OAEpB,MAAgB,CACRD,IAAaD,EACb,QAAQ,IAAI,2BAA2B,EAEvC,MAAMK,EAAS,aAAc,EAAE,CAEvC,OACKJ,EAAWD,EACxB,CACJ,EEhDA,UAAYM,MAAY,SACxB,OAAOC,MAAW,QACX,SAAO,EACd,IAAqBC,EAArB,KAA6B,CACzB,YAAoBC,EAA2B,CAA3B,aAAAA,CAEpB,CAEA,MAAM,OAAQ,CACV,GAAI,CACA,IAAMC,EAAO,MAAM,KAAK,QAAQ,QAAQ,EAExC,MAAMA,EAAK,KAAK,0DAA0D,EAE1E,QAAQ,IAAI,aAAa,EAEzB,QAAQ,IAAI,oBAAoB,EAEhC,MAAM,KAAK,MAAM,CAAC,EAElB,IAAIC,EAAoB,KAAK,MAAM,wFAAwF,EACvHC,EAAiB,MAAMF,EAAK,EAAEC,CAAiB,EAEnD,GAAI,CAACC,EAAgB,CACjB,QAAQ,IAAI,0BAA0B,EACtC,MACJ,CAEA,QAAQ,IAAI,8BAA8B,EAE1C,MAAMA,EAAe,MAAM,EAE3B,IAAIC,EAAc,KAAK,MAAM,2GAA2G,EAEpIC,EAAmB,MAAM,KAAK,MAAMJ,EAAK,GAAGG,CAAW,CAAC,EAE5D,GAAI,CAACC,EAAiB,OAAQ,CAC1B,QAAQ,IAAI,4BAA4B,EACxC,MACJ,CAEA,QAAQ,IAAI,0BAA0B,EAEtC,IAAIC,EAAmB,GAEvB,QAASC,EAAI,EAAGA,EAAIF,EAAiB,OAAQE,IAAK,CAC9C,IAAIC,EAAkB,MAAMP,EAAK,SAAUQ,GAAOA,EAAG,YAAaJ,EAAiBE,CAAC,CAAC,EAIrF,GAFAC,EAAkBA,EAAkBA,EAAgB,KAAK,EAAI,GAEzDA,IAAoB,MAAO,CAC3B,MAAMH,EAAiBE,CAAC,EAAE,MAAM,EAEhCD,EAAmB,GACnB,KACJ,CACJ,CAEA,GAAI,CAACA,EAAkB,CACnB,QAAQ,IAAI,oBAAoB,EAChC,MACJ,CAEA,QAAQ,IAAI,mBAAmB,EAE/B,MAAM,KAAK,MAAM,CAAC,EAElB,QAAQ,IAAI,sBAAsB,EAElC,IAAII,EAAgB,KAAK,MAAM,2FAA2F,EAEtHC,EAAa,MAAMV,EAAK,EAAES,CAAa,EAE3C,GAAI,CAACC,EAAY,CACb,QAAQ,IAAI,sBAAsB,EAClC,MACJ,CAEA,QAAQ,IAAI,qBAAqB,EAEjC,IAAIC,EAAQ,MAAMX,EAAK,SAAUQ,GAAOA,EAAG,YAAaE,CAAU,EAElE,GAAIC,EAAO,CACP,IAAMC,EAAQ,UACdD,EAAQA,EAAM,QAAQC,EAAO,EAAE,EAE/B,IAAIC,EAAsB,QAAQ,IAAI,oBACtCA,EAAsBA,GAA4C,IAElE,QAAQ,KAAK,UAAYF,CAAK,EAE1BA,GAASE,GACT,MAAM,KAAK,eAAeF,CAAK,CAEvC,CAEA,MAAMX,EAAK,MAAM,EAEjB,MAAM,KAAK,QAAQ,WAAW,EAE9B,QAAQ,IAAI,sBAAsB,CACtC,OAASc,EAAO,CACZ,QAAQ,IAAIA,CAAK,CACrB,CACJ,CAEA,MAAMC,EAAkB,CACpB,MAAO,cAAcA,CAAQ,GACjC,CAEA,MAAM,MAAMC,EAAiB,CACzB,OAAO,IAAI,QAASC,GAAY,CAC5B,WAAWA,EAASD,EAAU,GAAI,CACtC,CAAC,CACL,CAEA,MAAM,eAAeL,EAAe,CAGhC,IAAIO,EAAM,+BAFE,QAAQ,IAAI,kBAEsB,eAE1CC,EAAS,CACT,QAAS,QAAQ,IAAI,kBACrB,KAAM,UAAUR,CAAK,EACzB,EAEA,MAAMd,EAAM,IAAIqB,EAAK,CACjB,OAAAC,CACJ,CAAC,CACL,CACJ,EChIA,IAAIC,EAAS,IAEZ,SACG,YAAY,SAAY,CAChBA,IAIJA,EAAS,GAET,MAAMC,EAAI,EAEVD,EAAS,GACb,EAAG,GAAI,KAIX,eAAeC,GAAM,CACjB,IAAMC,EAAU,MAAM,IAAIC,IAAS,OAAO,EAE1C,GAAI,CAACD,EAAS,CACV,QAAQ,IAAI,qBAAqB,EACjC,MACJ,CAIA,MAFgB,IAAIE,EAAQF,CAAO,EAErB,MAAM,CACxB",
  "names": ["puppeteer", "createClient", "client", "setCache", "key", "value", "getCache", "Browser", "max_attempt", "attempts", "wsEndpoint", "getCache", "puppeteer", "setCache", "dotenv", "axios", "Scraper", "browser", "page", "currency_input_xp", "currency_input", "currency_xp", "currency_buttons", "clicked_currency", "i", "currency_button", "el", "first_item_xp", "first_item", "price", "regex", "buy_price_threshold", "error", "selector", "seconds", "resolve", "url", "params", "locked", "run", "browser", "Browser", "Scraper"]
}
