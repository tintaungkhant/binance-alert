{
  "version": 3,
  "sources": ["../src/browser.ts", "../src/helpers.ts", "../src/start_browser.ts"],
  "sourcesContent": ["import puppeteer, { Browser as PuppeteerBrowser } from \"puppeteer\"\nimport { getCache, setCache } from \"./helpers\"\n\nexport default class Browser {\n    browser!: PuppeteerBrowser\n\n    async create() {\n        let max_attempt = 2;\n        let attempts = 0;\n\n        do {\n            try {\n                attempts++;\n\n                let wsEndpoint = await getCache(\"wsEndpoint\");\n\n                if (wsEndpoint) {\n                    this.browser = await puppeteer.connect({\n                        browserWSEndpoint: wsEndpoint\n                    });\n\n                    console.log(\"Browser connected\");\n                    console.log(\"WS Endpoint: \" + wsEndpoint)\n\n                    return this.browser;\n                }\n\n                if (!wsEndpoint) {\n                    const args = [\n                        '--autoplay-policy=user-gesture-required',\n                        '--disable-background-networking',\n                        '--disable-background-timer-throttling',\n                        '--disable-backgrounding-occluded-windows',\n                        '--disable-breakpad',\n                        '--disable-client-side-phishing-detection',\n                        '--disable-component-update',\n                        '--disable-default-apps',\n                        '--disable-dev-shm-usage',\n                        '--disable-domain-reliability',\n                        '--disable-extensions',\n                        '--disable-features=AudioServiceOutOfProcess',\n                        '--disable-hang-monitor',\n                        '--disable-ipc-flooding-protection',\n                        '--disable-notifications',\n                        '--disable-offer-store-unmasked-wallet-cards',\n                        '--disable-popup-blocking',\n                        '--disable-print-preview',\n                        '--disable-prompt-on-repost',\n                        '--disable-renderer-backgrounding',\n                        '--disable-setuid-sandbox',\n                        '--disable-speech-api',\n                        '--disable-sync',\n                        '--hide-scrollbars',\n                        '--ignore-gpu-blacklist',\n                        '--metrics-recording-only',\n                        '--mute-audio',\n                        '--no-default-browser-check',\n                        '--no-first-run',\n                        '--no-pings',\n                        '--no-sandbox',\n                        '--no-zygote',\n                        '--password-store=basic',\n                        '--use-gl=swiftshader',\n                        '--use-mock-keychain',\n                    ];\n\n                    this.browser = await puppeteer.launch({\n                        userDataDir: \"./user_data\",\n                        headless: true,\n                        args\n                    });\n\n                    wsEndpoint = this.browser.wsEndpoint();\n\n                    await setCache(\"wsEndpoint\", wsEndpoint);\n\n                    console.log(\"Browser created\");\n                    console.log(\"WS Endpoint: \" + wsEndpoint)\n\n                    return this.browser;\n                }\n            } catch (error) {\n                if (attempts === max_attempt) {\n                    console.log(error);\n                    console.log(\"Error at starting browser\");\n                } else {\n                    await setCache(\"wsEndpoint\", \"\");\n                }\n            }\n        } while (attempts < max_attempt);\n    }\n}", "import { createClient } from \"redis\";\nimport * as dotenv from \"dotenv\";\ndotenv.config();\n\nconst url = process.env.REDIS_URL;\n\nconst client = createClient({ url });\n\nexport async function setCache(key: string, value: any) {\n    await client.connect();\n\n    await client.set(key, value);\n\n    await client.disconnect();\n}\n\nexport async function getCache(key: string) {\n    await client.connect();\n\n    let value = await client.get(key);\n\n    await client.disconnect();\n\n    return value;\n}", "import Browser from \"./browser\";\n\n(async function(){\n    const browser = new Browser;\n\n    await browser.create();\n})();"],
  "mappings": "AAAA,OAAOA,MAAgD,YCAvD,OAAS,gBAAAC,MAAoB,QAC7B,UAAYC,MAAY,SACjB,SAAO,EAEd,IAAMC,EAAM,QAAQ,IAAI,UAElBC,EAASH,EAAa,CAAE,IAAAE,CAAI,CAAC,EAEnC,eAAsBE,EAASC,EAAaC,EAAY,CACpD,MAAMH,EAAO,QAAQ,EAErB,MAAMA,EAAO,IAAIE,EAAKC,CAAK,EAE3B,MAAMH,EAAO,WAAW,CAC5B,CAEA,eAAsBI,EAASF,EAAa,CACxC,MAAMF,EAAO,QAAQ,EAErB,IAAIG,EAAQ,MAAMH,EAAO,IAAIE,CAAG,EAEhC,aAAMF,EAAO,WAAW,EAEjBG,CACX,CDrBA,IAAqBE,EAArB,KAA6B,CACzB,QAEA,MAAM,QAAS,CACX,IAAIC,EAAc,EACdC,EAAW,EAEf,EACI,IAAI,CACAA,IAEA,IAAIC,EAAa,MAAMC,EAAS,YAAY,EAE5C,GAAID,EACA,YAAK,QAAU,MAAME,EAAU,QAAQ,CACnC,kBAAmBF,CACvB,CAAC,EAED,QAAQ,IAAI,mBAAmB,EAC/B,QAAQ,IAAI,gBAAkBA,CAAU,EAEjC,KAAK,QAGhB,GAAI,CAACA,EAAY,CACb,IAAMG,EAAO,CACT,0CACA,kCACA,wCACA,2CACA,qBACA,2CACA,6BACA,yBACA,0BACA,+BACA,uBACA,8CACA,yBACA,oCACA,0BACA,8CACA,2BACA,0BACA,6BACA,mCACA,2BACA,uBACA,iBACA,oBACA,yBACA,2BACA,eACA,6BACA,iBACA,aACA,eACA,cACA,yBACA,uBACA,qBACJ,EAEA,YAAK,QAAU,MAAMD,EAAU,OAAO,CAClC,YAAa,cACb,SAAU,GACV,KAAAC,CACJ,CAAC,EAEDH,EAAa,KAAK,QAAQ,WAAW,EAErC,MAAMI,EAAS,aAAcJ,CAAU,EAEvC,QAAQ,IAAI,iBAAiB,EAC7B,QAAQ,IAAI,gBAAkBA,CAAU,EAEjC,KAAK,OAChB,CACJ,OAASK,EAAO,CACRN,IAAaD,GACb,QAAQ,IAAIO,CAAK,EACjB,QAAQ,IAAI,2BAA2B,GAEvC,MAAMD,EAAS,aAAc,EAAE,CAEvC,OACKL,EAAWD,EACxB,CACJ,GEzFC,gBAAgB,CAGb,MAFgB,IAAIQ,IAEN,OAAO,CACzB,GAAG",
  "names": ["puppeteer", "createClient", "dotenv", "url", "client", "setCache", "key", "value", "getCache", "Browser", "max_attempt", "attempts", "wsEndpoint", "getCache", "puppeteer", "args", "setCache", "error", "Browser"]
}
